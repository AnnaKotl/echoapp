const fs = require('fs');
const path = require('path');
require('dotenv').config();

const logFilePath = path.join(__dirname, '..', 'logs', 'cors.log');

// –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥—ñ–≤, —è–∫—â–æ –Ω–µ–º–∞
if (!fs.existsSync(path.dirname(logFilePath))) {
  fs.mkdirSync(path.dirname(logFilePath), { recursive: true });
}

function logToFile(message) {
  const timestamp = new Date().toISOString();
  fs.appendFileSync(logFilePath, `[${timestamp}] ${message}\n`);
}

// –ú–∞—Å–∏–≤ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö origin
const allowedOrigins = process.env.ALLOWED_ORIGINS
  ? process.env.ALLOWED_ORIGINS.split(',').map(o => o.trim())
  : [];

const corsOptions = {
  origin: (origin, callback) => {
    // –ó–∞–ø–∏—Ç–∏ –±–µ–∑ origin (Postman, —Å–µ—Ä–≤–µ—Ä–Ω—ñ –∑–∞–ø–∏—Ç–∏) –∑–∞–≤–∂–¥–∏ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ
    if (!origin) return callback(null, true);

    if (allowedOrigins.includes(origin)) {
      console.log(`‚úÖ CORS: allowed origin -> ${origin}`);
      callback(null, true);
    } else {
      const msg = `üö® CORS BLOCKED: ${origin} is not allowed`;
      console.warn(msg);
      logToFile(msg);
      callback(new Error('Not allowed by CORS'));
    }
  },
  methods: ['GET','HEAD','PUT','PATCH','POST','DELETE','OPTIONS'],
  allowedHeaders: ['Content-Type','Authorization','x-admin-secret'],
  credentials: true, // –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –¥–ª—è cookies –∞–±–æ Bearer
  optionsSuccessStatus: 204, // —Å—Ç–∞—Ç—É—Å –¥–ª—è preflight
};

module.exports = { corsOptions, allowedOrigins };
